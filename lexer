 ;;; make-lexer : String String -> Lexer
          ;;; GIVEN: two strings s1 and s2
          ;;; RETURNS: a Lexer whose token string is s1
          ;;;     and whose input string is s2
          ;;;
          ;;; lexer-token : Lexer -> String
          ;;; GIVEN: a Lexer
          ;;; RETURNS: its token string
          ;;; EXAMPLE:
          ;;;     (lexer-token (make-lexer "abc" "1234")) =>  "abc"
          ;;;
          ;;; lexer-input : Lexer -> String
          ;;; GIVEN: a Lexer
          ;;; RETURNS: its input string
          ;;; EXAMPLE:
          ;;;     (lexer-input (make-lexer "abc" "1234")) =>  "1234"
          ;;;
          ;;; initial-lexer : String -> Lexer
          ;;; GIVEN: an arbitrary string
          ;;; RETURNS: a Lexer lex whose token string is empty
          ;;;     and whose input string is the given string
          ;;;
          ;;; lexer-stuck? : Lexer -> Boolean
          ;;; GIVEN: a Lexer
          ;;; RETURNS: false if and only if the given Lexer's input string
          ;;;     is non-empty and begins with an English letter or digit;
          ;;;     otherwise returns true.
          ;;; EXAMPLES:
          ;;;     (lexer-stuck? (make-lexer "abc" "1234"))  =>  false
          ;;;     (lexer-stuck? (make-lexer "abc" "+1234"))  =>  true
          ;;;     (lexer-stuck? (make-lexer "abc" ""))  =>  true
          ;;;
          ;;; lexer-shift : Lexer -> Lexer
          ;;; GIVEN: a Lexer
          ;;; RETURNS:
          ;;;   If the given Lexer is stuck, returns the given Lexer.
          ;;;   If the given Lexer is not stuck, then the token string
          ;;;       of the result consists of the characters of the given
          ;;;       Lexer's token string followed by the first character
          ;;;       of that Lexer's input string, and the input string
          ;;;       of the result consists of all but the first character
          ;;;       of the given Lexer's input string.
          ;;; EXAMPLES:
          ;;;     (lexer-shift (make-lexer "abc" ""))
          ;;;         =>  (make-lexer "abc" "")
          ;;;     (lexer-shift (make-lexer "abc" "+1234"))
          ;;;         =>  (make-lexer "abc" "+1234")
          ;;;     (lexer-shift (make-lexer "abc" "1234"))
          ;;;         =>  (make-lexer "abc1" "234")
          ;;;
          ;;; lexer-reset : Lexer -> Lexer
          ;;; GIVEN: a Lexer
          ;;; RETURNS: a Lexer whose token string is empty and whose
          ;;;     input string is empty if the given Lexer's input string
          ;;;     is empty and otherwise consists of all but the first
          ;;;     character of the given Lexer's input string.
          ;;; EXAMPLES:
          ;;;     (lexer-reset (make-lexer "abc" ""))
          ;;;         =>  (make-lexer "" "")
          ;;;     (lexer-reset (make-lexer "abc" "+1234"))
          ;;;         =>  (make-lexer "" "1234")
